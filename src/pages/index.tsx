import type { NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Comment from "../components/Comment";
import { GetServerSideProps } from "next";
import { prisma } from "../server/db/client";
import { Comment as CommentType, User as UserType } from "@prisma/client";
import { useState } from "react";
// import { number } from "zod";
type CommentWithAuthor = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  replyingToId: string | null;
  content: string;
  upvotes: number;
  commenter: UserType;
  replies: CommentType[];
};

type RelativeTimeFormatUnit =
  | "year"
  | "years"
  | "quarter"
  | "quarters"
  | "month"
  | "months"
  | "week"
  | "weeks"
  | "day"
  | "days"
  | "hour"
  | "hours"
  | "minute"
  | "minutes"
  | "second"
  | "seconds";
const formatter = new Intl.RelativeTimeFormat("en-US", {
  numeric: "auto",
  style: "long",
});

const howLongHasItBeen = (
  date: Date
): { value: number; unit: RelativeTimeFormatUnit } => {
  const differenceInMs = new Date().getTime() - date.getTime();
  const numberOfYears = Math.floor(differenceInMs / 31556925216);
  if (numberOfYears >= 1) return { value: numberOfYears, unit: "year" };
  const numberOfMonths = Math.floor(differenceInMs / 2629800000);
  if (numberOfMonths >= 1) return { value: numberOfMonths, unit: "month" };

  const numberOfWeeks = Math.floor(differenceInMs / 604800000);
  if (numberOfWeeks >= 1) return { value: numberOfWeeks, unit: "week" };

  const numberOfDays = Math.floor(differenceInMs / 86400000);
  if (numberOfDays >= 1) return { value: numberOfDays, unit: "day" };

  const numberOfHours = Math.floor(differenceInMs / 3600000);
  if (numberOfHours >= 1) return { value: numberOfHours, unit: "hour" };
  const numberOfMinutes = Math.floor(differenceInMs / 60000);
  if (numberOfMinutes >= 1) return { value: numberOfMinutes, unit: "minute" };
  const numberOfSeconds = Math.floor(differenceInMs / 1000);
  if (numberOfSeconds <= 1) return { value: 0, unit: "second" };
  return { value: numberOfSeconds, unit: "second" };
};
const Home: NextPage = ({
  comments: commentsFromServer,
}: {
  comments: CommentWithAuthor[];
}) => {
  const [comments, setComments] = useState(() => commentsFromServer);
  const { data: session, status } = useSession();
  if (status === "loading") {
    return <main>Loading...</main>;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Guestbook</h1>
      {session ? (
        <div>
          <p>hi {session.user?.name}</p>
          <button onClick={() => signOut()}>Logout</button>
        </div>
      ) : (
        <div>
          <button onClick={() => signIn("discord")}>Login with Discord</button>
        </div>
      )}
      <main className="min-h-screen max-w-screen bg-[#EAECF1] flex flex-col justify-center items-center">
        {comments.map((comment) => {
          const relativeDate = howLongHasItBeen(comment.createdAt);
          if (comment.replies.length > 0) {
            return (
              <div
                key={comment.id}
                className=" w-[94%] sm:w-[80%] md:w-[70%] lg:w-[60%] xl:w-[40%]"
              >
                <Comment
                  authorId={comment.userId}
                  user={session?.user}
                  setComments={setComments}
                  comments={comments}
                  replyingTo={comment.replyingToId || comment.id}
                  hasReplies={true}
                  upvotes={comment.upvotes}
                  content={comment.content}
                  avatar={comment.commenter.image || ""}
                  author={comment.commenter.name || ""}
                  date={
                    relativeDate.value === 0
                      ? "right now"
                      : formatter.format(-relativeDate.value, relativeDate.unit)
                  }
                />
                <div className="pl-[1rem] sm:pl-[2.1rem] md:pl-[2.3rem] mt-5 ">
                  <div className="w-full border-l-2  border-x-[#C3C4EF] flex justify-evenly items-end flex-col  ">
                    {comment.replies.map((reply) => {
                      const relativeDate = howLongHasItBeen(reply.createdAt);
                      return (
                        <Comment
                          authorId={reply.userId}
                          user={session?.user}
                          replyingTo={comment.replyingToId || comment.id}
                          comments={comments}
                          setComments={setComments}
                          isReply={true}
                          key={reply.id}
                          upvotes={reply.upvotes}
                          content={reply.content}
                          avatar={reply.commenter.image || ""}
                          author={reply.commenter.name || ""}
                          date={
                            relativeDate.value === 0
                              ? "right now"
                              : formatter.format(
                                  -relativeDate.value,
                                  relativeDate.unit
                                )
                          }
                        />
                      );
                    })}
                  </div>
                </div>
              </div>
            );
          } else {
            return (
              <Comment
                authorId={comment.userId}
                user={session?.user}
                replyingTo={comment.replyingToId || comment.id}
                comments={comments}
                setComments={setComments}
                key={comment.id}
                upvotes={comment.upvotes}
                content={comment.content}
                avatar={comment.commenter.image || ""}
                author={comment.commenter.name || ""}
                date={
                  relativeDate.value === 0
                    ? "right now"
                    : formatter.format(-relativeDate.value, relativeDate.unit)
                }
              />
            );
          }
        })}
      </main>
    </>
  );
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Guestbook</h1>
        {session ? (
          <div>
            <p>hi {session.user?.name}</p>

            <button onClick={() => signOut()}>Logout</button>
          </div>
        ) : (
          <div>
            <button onClick={() => signIn("discord")}>
              Login with Discord
            </button>
          </div>
        )}
      </main>
    </>
  );
};
export const getServerSideProps: GetServerSideProps = async (context) => {
  const comments = await prisma.comment.findMany({
    where: { replyingToId: null },
    include: {
      commenter: true,
      replies: {
        include: { commenter: true },
        orderBy: [{ upvotes: "desc" }, { createdAt: "desc" }],
      },
    },
    orderBy: [{ upvotes: "desc" }, { createdAt: "desc" }],
  });
  return {
    props: { comments }, // will be passed to the page component as props
  };
};

export default Home;
